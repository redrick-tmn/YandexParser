@{
    ViewBag.Title = "Queries";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
    $(function() {
        $.ajax({
            method: 'post',
            dataType: 'json',
            url: 'QueriesJson',
            success: function(data) {
                $('#results').tableGen({ 
                    data: data,
                    title: 'Queries',
                    columns: {
                        Id : {
                            visible: false
                        },
                        QueryText: {
                            visible: true,
                            title: 'Query',
                            sort: function (a, b) {
                                if (a.QueryText < b.QueryText) return -1;
                                else if (a.QueryText > b.QueryText) return 1;
                                else return 0;
                            }
                        },
                        Position: {
                            visible: true,
                            sort: function (a, b) {
                                if (a.Position < b.Position) return -1;
                                else if (a.Position > b.Position) return 1;
                                else return 0;
                            }
                        },
                        Url: {
                            visible: true,
                            parse: function (value) {
                                return $('<a>', {
                                    href: value
                                }).append(value);
                            },
                            sort: function (a, b) {
                                if (a.Url < b.Url) return -1;
                                else if (a.Url > b.Url) return 1;
                                else return 0;
                            }
                        },
                        Title: {
                            visible: true,
                            sort: function (a, b) {
                                if (a.Title < b.Title) return -1;
                                else if (a.Title > b.Title) return 1;
                                else return 0;
                            }
                        },
                        Date: {
                            visible: true,
                            style: 'white-space: nowrap;',
                            parse: function (value) {
                                //spike for dateTime
                                value = new Date(parseInt(value.replace("/Date(", "").replace(")/",""), 10));
                                return value.toLocaleString();
                            },
                            sort: function(a, b) {
                                if (a.Date < b.Date) return -1;
                                else if (a.Date > b.Date) return 1;
                                else return 0;
                            }
                        }
                    }
                });
            }
        });
    });
</script>

<script type="text/javascript">
    (function ($) {

        function renderBody(tbody, options, colSettings, sortType) {
            tbody.empty();
            var data = typeof colSettings === 'undefined' || !colSettings.hasOwnProperty('sort') ? options.data : options.data.sort(colSettings.sort);
            if (typeof sortType === 'undefined' || sortType == 'up')
                data = data.reverse();
            $.each(data, function (objIndex, objValue) {
                var row = $('<tr>').appendTo(tbody);
                $.each(options.columns, function (colIndex, colSettings) {

                    if (!colSettings.visible || !objValue.hasOwnProperty(colIndex))
                        return;

                    var cellHtml = '';

                    if (!colSettings.parse)
                        cellHtml = objValue[colIndex];
                    else
                        cellHtml = colSettings.parse(objValue[colIndex]);

                    var cell = $('<td>').append(cellHtml).appendTo(row);
                    if (colSettings.style)
                        cell.attr('style', colSettings.style);
                });
            });
        }

        function renderTable(self, options) {
            var data = options.data;
            var columns = options.columns;

            if (options.hasOwnProperty('title')) {
                $('<h2>').append(options.title).appendTo(self);
            }
        
            if (data.length == 0)
                return;
                        
            var tableDiv = $('<div>').appendTo(self),
                table = $('<table>').addClass('table table-hover table-bordered table-striped').appendTo(tableDiv),
                thead = $('<thead>').appendTo(table), 
                headRow = $('<tr>').appendTo(thead),
                tbody = $('<tbody>').appendTo(table);

            $.each(columns, function(colIndex, colSettings) {
                if (!colSettings.visible)
                    return;
                $('<th>').append(!colSettings.title ? colIndex : colSettings.title)
                    .append($('<span>', { id: 'sort-span' }))
                    .addClass('sort-header')
                    .css('vertical-align', 'center')
                    .appendTo(headRow)
                    .click(function () {
                        var sortSpan = $('#sort-span', $(this));
                        
                        var sort = sortSpan.data('sort');
                        var sortType = !sort || sort == 'up' ? 'down' : 'up';
                        $('[id=sort-span]').empty().data('sort', null);
                        sortSpan.empty().append(' ').append($('<i>').addClass('icon-large icon-sort-' + sortType));
                        sortSpan.data('sort', sortType);
                        renderBody(tbody, options, colSettings, sortType);
                    });
            });

            renderBody(tbody, options);

        }

        var defaultColumn = {
            visible: true
        };

        var defaults = {
            columns: {
                
            },
            sort: []
        };

        var methods = {

            init: function (options) {

                var settings = this.data('data');
                if (!settings) {
                    settings = $.extend({}, defaults, options);
                    $.each(settings.columns, function (colIndex, colSettings) {
                        colSettings = $.extend({}, defaultColumn, colSettings);
                    });
                }
                var self = this;
                self.data('data', settings);
                renderTable(self, options);
                return this;
            },

            reload: function (versionId) {
                var settings = this.data('data');
                var self = this;
                return this;
            },

            destroy: function () {
                this.data('data').remove();
            }
        };


        $.fn.tableGen = function (method) {

            if (methods[method]) {
                return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
            }
            else if (typeof method === 'object' || !method) {
                return methods.init.apply(this, arguments);
            } else {
                return $.error('Method "' + method + '" not found in tableGen plugin');
            }
        };


    })(jQuery);

</script>

<div id="results"></div>
